apply plugin: 'java'
apply plugin: 'java-gradle-plugin'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'checkstyle'

group = "io.github.kklaeger"
version = "1.2.0-SNAPSHOT"

sourceCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation("io.github.kklaeger:japproval-core:${jApprovalVersion}")
}

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

publishing {
    publications {
        pluginMaven(MavenPublication) {
            pom {
                name = 'jApproval gradle plugin'
                description = 'A gradle plugin that automates the diff and approve steps.'
                url = 'https://github.com/kklaeger/japproval'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        name = 'Konstantin Kl√§ger'
                        email = 'konstantin.klaeger@novatec-gmbh.de'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/kklaeger/japproval.git'
                    developerConnection = 'scm:git:ssh://github.com/kklaeger/japproval.git'
                    url = 'https://github.com/kklaeger/japproval'
                }
            }
            artifact(sourceJar) {
                classifier = 'sources'
            }
            artifact(javadocJar) {
                classifier = 'javadoc'
            }
        }
    }
    repositories {
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username sonatypeUsername
                password sonatypePassword
            }
        }
    }
}

signing {
    useGpgCmd()
    sign(publishing.publications)
}

tasks.withType(Sign) {
    onlyIf {
        project.hasProperty('signing.gnupg.keyName')
    }
}

checkstyle {
    configFile file("qa/checkstyle/checkstyle.xml")
    toolVersion = checkstyleVersion
}
