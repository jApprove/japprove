apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'checkstyle'

group = "org.japprove"
version = "1.2.0"

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    implementation("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
    implementation("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")

    implementation("commons-io:commons-io:${commonsIOVersion}")

    implementation("org.apache.logging.log4j:log4j-core:${log4jVersion}")
    implementation("org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}")

    implementation("io.github.java-diff-utils:java-diff-utils:${javaDiffUtilsVersion}")

    implementation("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
    implementation("com.flipkart.zjsonpatch:zjsonpatch:${zjsonpatchVersion}")
    implementation("com.jayway.jsonpath:json-path:${jsonPathVersion}")
}

test {
    useJUnitPlatform()
}

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = "${rootProject.group}:${rootProject.name}"
                description = 'The core part of jApprove that provides the basic testing functionality.'
                url = 'https://github.com/jApprove/japprove'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        name = 'Konstantin Klaeger'
                        email = 'konstantin.klaeger@novatec-gmbh.de'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/jApprove/japprove.git'
                    developerConnection = 'scm:git:ssh://github.com/jApprove/japprove.git'
                    url = 'https://github.com/jApprove/japprove'
                }
            }
            artifact(sourceJar) {
                classifier = 'sources'
            }
            artifact(javadocJar) {
                classifier = 'javadoc'
            }
        }
    }
    repositories {
        maven {
            def releaseUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotUrl : releaseUrl
            if (project.hasProperty('publishing.sonatype.username')) {
                credentials {
                    username project.property('publishing.sonatype.username')
                    password project.property('publishing.sonatype.password')
                }
            }
        }
    }
}

signing {
    useGpgCmd()
    sign(publishing.publications)
}

tasks.withType(Sign) {
    onlyIf {
        project.hasProperty('signing.gnupg.keyName')
    }
}

checkstyle {
    configFile file("qa/checkstyle/checkstyle.xml")
    toolVersion = checkstyleVersion
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
